<%@ Application Language="C#" %>

<script runat="server">

    #region
    private const string DummyCacheItemKey = "Cache";

    private const string DummyPageUrl ="http://localhost/WebForm1.aspx";

    private bool RegisterCacheEntry()
    {
        if( null != HttpContext.Current.Cache[ DummyCacheItemKey ] ) return false;

        HttpContext.Current.Cache.Add( DummyCacheItemKey, "Test", null,
            DateTime.MaxValue, TimeSpan.FromMinutes(1),
            CacheItemPriority.Normal,
            new CacheItemRemovedCallback( CacheItemRemovedCallback ) );

        return true;
    }

    /// <summary>
    /// 该缓存实体是一个虚设的实体。我们不需要在这里存储任何有价值的信息，因为无论我们在这里存储什么，他们都有可能在应用程序重启时丢失。另外，我们所需要的只是使该项的频繁回调。
    ///在回调的内部，我们就可以完成“计划任务”：在缓存项失效时再次存储缓存项
    /// </summary>
    /// <param name="key"></param>
    /// <param name="value"></param>
    /// <param name="reason"></param>
    public void CacheItemRemovedCallback( string key, object value, CacheItemRemovedReason reason)
    {
        System.Diagnostics.Debug.WriteLine("Cache item callback: " + DateTime.Now.ToString() );

        HitPage();

        // Do the service works  

        ServiceProvider.Service.Log lg = new ServiceProvider.Service.Log();
        
        lg.WriteTestLog(DateTime.Now.ToString());


        DoWork();
    }


    #endregion


    //需要执行的任务
    private void DoWork()
    {
        System.Diagnostics.Debug.WriteLine("Begin DoWork...");
        System.Diagnostics.Debug.WriteLine("Running as: " +
              System.Security.Principal.WindowsIdentity.GetCurrent().Name );

        DoSomeFileWritingStuff();
        //DoSomeDatabaseOperation();
        //DoSomeWebserviceCall();
        //DoSomeMSMQStuff();
        //DoSomeEmailSendStuff();
        //Arguseyes_ServiceProvider.Service.EmailInfoService.Instance.SendTestEmail();

        System.Diagnostics.Debug.WriteLine("End DoWork...");
    }

    //HitPage方法对一个虚拟页面发出调用：
    private void HitPage()
    {
        System.Net.WebClient client = new System.Net.WebClient();
        client.DownloadData(DummyPageUrl);
    }

    private void DoSomeFileWritingStuff()
    {
        //System.Diagnostics.Debug.WriteLine("Writing to file...");
        //string path = System.Web.Hosting.HostingEnvironment.MapPath("/AutoLog.txt");
        //string servicename = "Test";
        //try
        //{
        //    using ( System.IO.StreamWriter writer =new System.IO.StreamWriter(path  , true) )
        //    {
        //        writer.WriteLine("执行计划任务[{0}]: {1}",servicename, DateTime.Now);
        //        writer.Close();
        //    }

        //    ServiceProvider.Service.DataCollectionService dcs = new ServiceProvider.Service.DataCollectionService(servicename);
        //    ServiceProvider.Service.TaobaoServiceSettings tss = new ServiceProvider.Service.TaobaoServiceSettings();
        //    System.Collections.ArrayList al_settings =  tss.GetAllFeildname(servicename, "fieldname");
        //    string[,] data = dcs.TaobaoDataCollection();
        //    dcs.InsertToSQL(servicename, data);

        //    using ( System.IO.StreamWriter writer =new System.IO.StreamWriter(path  , true) )
        //    {
        //        writer.WriteLine("执行完毕[{0}]: {1}",servicename, DateTime.Now);
        //        writer.Close();
        //    }
        //}
        //catch( Exception x )
        //{
        //    using( System.IO.StreamWriter writer =
        //     new System.IO.StreamWriter(path, true) )
        //    {
        //        writer.WriteLine("执行出错: {0} 出错原因：{1}", DateTime.Now,x.Message);
        //        writer.Close();
        //    }
        //}

        //System.Diagnostics.Debug.WriteLine("File write successful");
    }

    private void DoSomeEmailSendStuff()
    {

        //string emailAcount = "simon_lc_test@163.com";
        //string emailPassword = "simon123";
        //try
        //{
        //    System.Net.Mail.MailAddress from = new System.Net.Mail.MailAddress("simon_lc_test@163.com", "Simon");
        //    System.Net.Mail.MailAddress to = new System.Net.Mail.MailAddress("simon_lc_test@163.com", "simon1");
        //    System.Net.Mail.MailMessage message = new System.Net.Mail.MailMessage(from, to);
        //    message.Subject = "Using the SmtpClient class.";
        //    message.Body = @"Using this feature, you can send an e-mail message from an application very easily.";
        //    System.Net.Mail.SmtpClient client = new System.Net.Mail.SmtpClient("smtp.163.com");
        //    client.Credentials = new System.Net.NetworkCredential(emailAcount, emailPassword);
        //    client.Send(message);
        //}
        //catch (Exception x)
        //{
        //    System.Diagnostics.Debug.WriteLine(x);
        //    //Response.Write(x.Message);
        //}
    }



    void Application_Start(object sender, EventArgs e)
    {
        // 在应用程序启动时运行的代码
        RegisterCacheEntry();
    }

    void Application_End(object sender, EventArgs e)
    {
        //  在应用程序关闭时运行的代码

    }

    void Application_Error(object sender, EventArgs e)
    {
        // 在出现未处理的错误时运行的代码

    }

    void Session_Start(object sender, EventArgs e)
    {
        // 在新会话启动时运行的代码

    }

    void Session_End(object sender, EventArgs e)
    {
        // 在会话结束时运行的代码。 
        // 注意: 只有在 Web.config 文件中的 sessionstate 模式设置为
        // InProc 时，才会引发 Session_End 事件。如果会话模式设置为 StateServer
        // 或 SQLServer，则不引发该事件。

    }

    //无论虚拟页面在什么时候被调用，Application_BeginRequest方法都将被调用。在那里，我们可以核查是否它是一个“虚拟”页面。
    protected void Application_BeginRequest(object sender, EventArgs e)
    {
        // If the dummy page is hit, then it means we want to add another item  

        // in cache  

        if( HttpContext.Current.Request.Url.ToString() == DummyPageUrl )
        {
            // Add the item in cache and when succesful, do the work.  

            RegisterCacheEntry();
        }
    }

</script>
